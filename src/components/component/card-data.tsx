"use client";

/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/nUzLr3Z9qlN
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/

import { LineChart } from "recharts"
import { Button } from "@/components/ui/button"
import { cardStats } from "@/types/cardStats";
import Card from "../card";
import { Skeleton } from "@mui/material";
import HeroSkeleton from "../heroSkeleton";
import effectValue from "@/tools/effectValue";
import getTypeData from "@/tools/types/getTypeData";
import betterSameWorse from "@/tools/types/betterSameWorse";
import rarityCardCounts from "@/tools/types/rarityCountCard";
import Chart from "react-google-charts";
import { DeltaChart } from "../crossStats/deltaChart";
import { ChevronDown, ChevronUp, Ellipsis, EllipsisVertical } from "lucide-react";
import { DropdownMenu, DropdownMenuCheckboxItem, DropdownMenuContent, DropdownMenuItem, DropdownMenuLabel, DropdownMenuSeparator, DropdownMenuTrigger } from "../ui/dropdown-menu";
import { Badge } from "../ui/badge";
import { heroFromUid } from "@/types/heroFromUid";
import { weaponFromUid } from "@/types/weaponFromUid";
import { LookupLongCard, LookupSmallCard } from "../lookup/lookupCard";
import { DropdownMenuCheckboxItemProps } from "@radix-ui/react-dropdown-menu";
import { useEffect, useState } from "react";
import { langData } from "@/data/langs";
import { getLevel, getPercentToNextLevel, getXPForLevel } from "@/tools/xpHandler";
import { Progress } from "../ui/progress";
import realizationMsgs from "@/data/realizationMsgs";

import CrossStats from "../crossStats/crossStats";

type Checked = DropdownMenuCheckboxItemProps["checked"]

export function CardData(props: {
  data: cardStats | null,
  scan: heroFromUid | weaponFromUid | null;
}) {
  "use client";
  const data = props.data;
  const scan = props.scan;

  const [cardWidth, setCardWidth] = useState<number>(500)
  const [showFullStats, setShowFullStats] = useState<boolean>(false);

  useEffect(() => {
    if (typeof window !== undefined) {
      let screenWidth = document.body.clientWidth;
      setCardWidth(screenWidth < 500 ? screenWidth : 500)
      console.log(cardWidth)
    }
  }, [])

  const [isUpgraded, setIsUpgraded] = useState<Checked>(false)

  let card;

  if (data?.card) {
    card = data.card
  } else if (scan?.card) {
    card = scan.card
  }

  const stats = data;

  let level: number | null = null;
  let xp: number | null = null;

  if (scan && scan.t === "hero" && scan.experience.level) {
    xp = scan.experience.xp;
    level = getLevel(xp);
    console.log(xp, level);
  }

  return (
    <div className="max-w-6xl mx-auto px-4 py-8 sm:px-6 lg:px-8">
      <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
        <div className="flex justify-center">
          {data?.card && <Card
            data={isUpgraded ? scan?.upgradedCard : data.card}
            width={cardWidth}
          />}
          {!data?.card && <HeroSkeleton width={cardWidth} />}

        </div>
        <div className="space-y-6">
          <div className="flex items-center justify-between">
            <h1 className="text-3xl font-bold">
              {card && <div>{card.name} {stats && langData[stats.lang]}</div>}
              {!card && <div>Načítání karty</div>}
            </h1>
            <div className="flex flex-row align-middle space-x-3">

              {stats !== null && stats.delta !== null && <Badge>
                {effectValue(stats.delta, false)}
              </Badge>}

              <DropdownMenu>
                <DropdownMenuTrigger asChild>
                  <Button variant="outline" size="icon">
                    <EllipsisVertical className="h-4 w-4" />
                  </Button>
                </DropdownMenuTrigger>
                <DropdownMenuContent>
                  {card && <DropdownMenuItem onClick={() => {
                    // Open image on another card
                    window.open("/image/" + card.cid + "/" + card.name, "_blank")
                  }}>Stáhnout obrázek</DropdownMenuItem>}
                  {scan?.upgradedCard && <>
                    <DropdownMenuSeparator />
                    <DropdownMenuCheckboxItem
                      checked={isUpgraded}
                      onCheckedChange={(val) => {
                        setIsUpgraded(val)
                      }}
                    >
                      Zobrazit vylepšenou kartu
                    </DropdownMenuCheckboxItem>
                  </>}
                </DropdownMenuContent>
              </DropdownMenu>

            </div>
          </div>
          <div className="grid grid-cols-3 gap-4">
            <LookupSmallCard title="Horších karet" className="shadow-xl shadow-green-300">
              <div className="text-2xl font-bold">{stats?.worse}</div>
            </LookupSmallCard>
            <LookupSmallCard title="Stejných karet" className="shadow-xl shadow-grey-300">
              <div className="text-2xl font-bold">{stats?.same}</div>
            </LookupSmallCard>
            <LookupSmallCard title="Lepších karet" className="shadow-xl shadow-red-300">
              <div className="text-2xl font-bold">{stats?.better}</div>
            </LookupSmallCard>
          </div>
          {stats && <LookupLongCard
            title="Unikátní"
            rightTitle={stats.instances === 1 ? "Ano" : "Ne"}
          >
            {stats.instances === 1 ? <></> : <div className="text-2xl font-bold">{stats.instances + " instancí"}</div>}
          </LookupLongCard>}

          {scan?.owner && <LookupLongCard
            title="Vlastník karty"
            rightTitle=""
          >
            <div className="text-2xl font-bold">{scan.owner}</div>
          </LookupLongCard>}

          {level !== null && xp !== null && <LookupLongCard
            title={level !== 31 ? "Level " + level : "Maximální level"}
            rightTitle={level !== 31 ? xp + "/" + getXPForLevel(level + 1) + "XP" : +xp + "XP"}
          >
            <Progress value={getPercentToNextLevel(xp)} />
          </LookupLongCard>}

          {scan?.realization && <LookupLongCard
            title="Realizace"
            rightTitle=""
          >
            <div className="text-2xl font-bold">{realizationMsgs[scan.realization]}</div>
          </LookupLongCard>}

          {scan?.expansion && <LookupLongCard
            title="Rozšíření"
            rightTitle=""
          >
            <div className="text-2xl font-bold">{scan.expansion}</div>
          </LookupLongCard>}

          {stats && card && <LookupLongCard
            title="Rozložení průměrů"
            rightTitle=""
          >
            <DeltaChart cid={card.cid} delta={stats.delta} />
          </LookupLongCard>}


        </div>
      </div>

      <div className="mt-8 grid grid-cols-1 md:grid-cols-2 gap-4">
      </div>



      {card && data?.delta && showFullStats && <div>

      <CrossStats card={card} delta={data?.delta} />
      </div>}

      <div className="flex justify-center mt-8">
        {!showFullStats && <Button onClick={() => {
          setShowFullStats(true)
        }}>
          <ChevronDown className="mr-2 h-4 w-4" /> Zobrazit detailní statistiky
        </Button>}

        {showFullStats && <Button onClick={() => {
          setShowFullStats(false)
        }}>
          <ChevronUp className="mr-2 h-4 w-4" /> Skrýt detailní statistiky
        </Button>}
      </div>

    </div>
  )
}